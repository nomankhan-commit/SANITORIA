//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SANITORIA.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SANITORIA_DBEntities : DbContext
    {
        public SANITORIA_DBEntities()
            : base("name=SANITORIA_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<app_customer> app_customer { get; set; }
        public virtual DbSet<BankAccoutn> BankAccoutns { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<cart> carts { get; set; }
        public virtual DbSet<Comapny> Comapnies { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<CustomerBankAccoutn> CustomerBankAccoutns { get; set; }
        public virtual DbSet<inventory> inventories { get; set; }
        public virtual DbSet<order_header> order_header { get; set; }
        public virtual DbSet<order_item> order_item { get; set; }
        public virtual DbSet<PO_Product> PO_Product { get; set; }
        public virtual DbSet<policylist> policylists { get; set; }
        public virtual DbSet<PRODUCT_Requisition> PRODUCT_Requisition { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<PRODUCTs_of_Requisition> PRODUCTs_of_Requisition { get; set; }
        public virtual DbSet<ProductsCategory> ProductsCategories { get; set; }
        public virtual DbSet<ProductsVariant_> ProductsVariant_ { get; set; }
        public virtual DbSet<ProductVariant> ProductVariants { get; set; }
        public virtual DbSet<PurchaseBill> PurchaseBills { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<RECEIVED_ORDER> RECEIVED_ORDER { get; set; }
        public virtual DbSet<RECV_Product> RECV_Product { get; set; }
        public virtual DbSet<RFQ> RFQs { get; set; }
        public virtual DbSet<RfqProduct> RfqProducts { get; set; }
        public virtual DbSet<SALES_RECEIVED_ORDER> SALES_RECEIVED_ORDER { get; set; }
        public virtual DbSet<SALES_RECV_Product> SALES_RECV_Product { get; set; }
        public virtual DbSet<SalesBill> SalesBills { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesQuotation> SalesQuotations { get; set; }
        public virtual DbSet<SalesQuotationProduct> SalesQuotationProducts { get; set; }
        public virtual DbSet<securityPolicy> securityPolicies { get; set; }
        public virtual DbSet<SO_Product> SO_Product { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<USER> USERS { get; set; }
        public virtual DbSet<vendor> vendors { get; set; }
        public virtual DbSet<warehouse> warehouses { get; set; }
        public virtual DbSet<Bill_Product> Bill_Product { get; set; }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int salesReturn(Nullable<int> rid, Nullable<int> qty)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("salesReturn", ridParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_Inventory_Result> sp_Inventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Inventory_Result>("sp_Inventory");
        }
    
        public virtual int sp_updateRecievedProductQty(Nullable<int> rid, Nullable<int> qty)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updateRecievedProductQty", ridParameter, qtyParameter);
        }
    }
}
